name: CI/CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      sha_tag: ${{ steps.vars.outputs.SHA_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Lowercase owner (for GHCR path)
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (using GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.OWNER_LC }}/uptimechecker
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Expose image tag for deploy
        id: vars
        run: echo "SHA_TAG=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Show files for deploy (debug)
        run: |
          pwd
          ls -la
          echo "== migrations =="
          ls -la migrations || true

      - name: Prepare deploy bundle
        run: |
          set -e
          mkdir -p bundle
          if [ -f docker-compose.yml ]; then cp docker-compose.yml bundle/; fi
          if [ -f docker-compose.prod.yml ]; then cp docker-compose.prod.yml bundle/; fi
          if [ -d migrations ]; then cp -r migrations bundle/; fi
          echo "Bundle contents:"
          find bundle -maxdepth 2 -type f -print
          # fail early if no compose file made it into the bundle
          test -f bundle/docker-compose.yml -o -f bundle/docker-compose.prod.yml || { echo "No compose file found"; exit 1; }

      - name: Copy bundle to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          source: bundle/**
          target: ${{ secrets.PROD_DIR }}
          strip_components: 1   # drops the leading "bundle/" when extracting

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            set -e
            cd ${{ secrets.PROD_DIR }}
            export IMAGE_TAG='${{ needs.build-and-push.outputs.sha_tag }}'
            echo "Using IMAGE_TAG=$IMAGE_TAG"

            # choose whichever compose file was uploaded
            COMPOSE_FILE=docker-compose.yml
            if [ -f docker-compose.prod.yml ]; then COMPOSE_FILE=docker-compose.prod.yml; fi
            echo "Using $COMPOSE_FILE"

            docker compose -f "$COMPOSE_FILE" pull
            docker compose -f "$COMPOSE_FILE" up -d --remove-orphans
            docker image prune -f
